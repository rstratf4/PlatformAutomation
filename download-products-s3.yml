resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final

resources:
- name: daily
  type: time
  source:
    interval: 24h

- name: config
  type: git
  source:
    private_key: ((pcf-automation-ssh-key_private_key))
    uri: ((configuration_uri))
    branch: master
    submodules: all
    depth: 1

- name: splunk-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: splunk-nozzle-(.*).pivotal

- name: splunk-stemcell
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: splunk-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

- name: forgerock-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: forgerock-broker-(.*).pivotal

- name: forgerock-stemcell
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: forgerock-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

- name: apm-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: apm-(.*).pivotal

- name: apm-stemcell
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: apm-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

- name: mysql-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: pivotal-mysql-(.*).pivotal

- name: mysql-stemcell
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: mysql-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

- name: spring-cloud-services-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: p-spring-cloud-services-(.*).pivotal

- name: spring-cloud-services-stemcell
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: spring-cloud-services-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

- name: isolation-segment-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: p-isolation-segment-(.*).pivotal

- name: isolation-segement-stemcell
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: iso-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

- name: rabbitmq-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: p-rabbitmq-(.*).pivotal

- name: rabbitmq-stemcell
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: rabbitmq-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

- name: redis-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: p-redis-(.*).pivotal

- name: redis-stemcell
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: redis-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

- name: pas-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: cf-(.*).pivotal

- name: pas-stemcell
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: pas-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 2\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3_bucket))
    region_name: ((s3_region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: platform-automation-image-(.*).tgz
    
jobs:
- name: fetch-splunk
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
#  - task: credhub-interpolate
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/credhub-interpolate.yml
#    params:
#      CREDHUB_CLIENT: ((credhub-client))
#      CREDHUB_SECRET: ((credhub-secret))
#      CREDHUB_SERVER: ((credhub-server))
#      CREDHUB_CA_CERT: ((credhub-ca.certificate))
#      PREFIX: '/concourse/((foundation))'
#      INTERPOLATION_PATH: "((foundation))/download-product-configs"
#    input_mapping:
#      files: config
#    output_mapping:
#      interpolated-files: config
  - task: download-splunk-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/splunk.yml
    output_mapping: {downloaded-stemcell: splunk-stemcell}
  - aggregate:
    - put: splunk-product
      params:
        file: downloaded-product/*.pivotal
    - put: splunk-stemcell
      params:
        file: splunk-stemcell/*.tgz

- name: fetch-forgerock
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
#  - task: credhub-interpolate
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/credhub-interpolate.yml
#    params:
#      CREDHUB_CLIENT: ((credhub-client))
#      CREDHUB_SECRET: ((credhub-secret))
#      CREDHUB_SERVER: ((credhub-server))
#      CREDHUB_CA_CERT: ((credhub-ca.certificate))
#      PREFIX: '/concourse/((foundation))'
#      INTERPOLATION_PATH: "((foundation))/download-product-configs"
#    input_mapping:
#      files: config
#    output_mapping:
#      interpolated-files: config
  - task: download-forgerock-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/forgerock.yml
    output_mapping: {downloaded-stemcell: forgerock-stemcell}
  - aggregate:
    - put: forgerock-product
      params:
        file: downloaded-product/*.pivotal
    - put: forgerock-stemcell
      params:
        file: forgerock-stemcell/*.tgz

- name: fetch-spring-cloud-services
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
#  - task: credhub-interpolate
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/credhub-interpolate.yml
#    params:
#      CREDHUB_CLIENT: ((credhub-client))
#      CREDHUB_SECRET: ((credhub-secret))
#      CREDHUB_SERVER: ((credhub-server))
#      CREDHUB_CA_CERT: ((credhub-ca.certificate))
#      PREFIX: '/concourse/((foundation))'
#      INTERPOLATION_PATH: "((foundation))/download-product-configs"
#    input_mapping:
#      files: config
#    output_mapping:
#      interpolated-files: config
  - task: download-spring-cloud-services-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/spring-cloud-services.yml
    output_mapping: {downloaded-stemcell: spring-cloud-services-stemcell}
  - aggregate:
    - put: spring-cloud-services-product
      params:
        file: downloaded-product/*.pivotal
    - put: spring-cloud-services-stemcell
      params:
        file: spring-cloud-services-stemcell/*.tgz

- name: fetch-isolation-segment
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
#  - task: credhub-interpolate
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/credhub-interpolate.yml
#    params:
#      CREDHUB_CLIENT: ((credhub-client))
#      CREDHUB_SECRET: ((credhub-secret))
#      CREDHUB_SERVER: ((credhub-server))
#      CREDHUB_CA_CERT: ((credhub-ca.certificate))
#      PREFIX: '/concourse/((foundation))'
#      INTERPOLATION_PATH: "((foundation))/download-product-configs"
#    input_mapping:
#      files: config
#    output_mapping:
#      interpolated-files: config
  - task: download-isolation-segment-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/isoseg.yml
    output_mapping: {downloaded-stemcell: iso-stemcell}
  - aggregate:
    - put: isolation-segment-product
      params:
        file: downloaded-product/*.pivotal
    - put: isolation-segment-stemcell
      params:
        file: iso-stemcell/*.tgz

- name: fetch-apm
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
#  - task: credhub-interpolate
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/credhub-interpolate.yml
#    params:
#      CREDHUB_CLIENT: ((credhub-client))
#      CREDHUB_SECRET: ((credhub-secret))
#      CREDHUB_SERVER: ((credhub-server))
#      CREDHUB_CA_CERT: ((credhub-ca.certificate))
#      PREFIX: '/concourse/((foundation))'
#      INTERPOLATION_PATH: "((foundation))/download-product-configs"
#    input_mapping:
#      files: config
#    output_mapping:
#      interpolated-files: config
  - task: download-apm-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/apm.yml
    output_mapping: {downloaded-stemcell: apm-stemcell}
  - aggregate:
    - put: apm-product
      params:
        file: downloaded-product/*.pivotal
    - put: apm-stemcell
      params:
        file: apm-stemcell/*.tgz

- name: fetch-rabbitmq
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
#  - task: credhub-interpolate
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/credhub-interpolate.yml
#    params:
#      CREDHUB_CLIENT: ((credhub-client))
#      CREDHUB_SECRET: ((credhub-secret))
#      CREDHUB_SERVER: ((credhub-server))
#      CREDHUB_CA_CERT: ((credhub-ca.certificate))
#      PREFIX: '/concourse/((foundation))'
#      INTERPOLATION_PATH: "((foundation))/download-product-configs"
#    input_mapping:
#      files: config
#    output_mapping:
#      interpolated-files: config
  - task: download-rabbitmq-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/rabbitmq.yml
    output_mapping: {downloaded-stemcell: rabbitmq-stemcell}
  - aggregate:
    - put: rabbitmq-product
      params:
        file: downloaded-product/*.pivotal
    - put: rabbitmq-stemcell
      params:
        file: rabbitmq-stemcell/*.tgz

- name: fetch-mysql
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
#  - task: credhub-interpolate
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/credhub-interpolate.yml
#    params:
#      CREDHUB_CLIENT: ((credhub-client))
#      CREDHUB_SECRET: ((credhub-secret))
#      CREDHUB_SERVER: ((credhub-server))
#      CREDHUB_CA_CERT: ((credhub-ca.certificate))
#      PREFIX: '/concourse/((foundation))'
#      INTERPOLATION_PATH: "((foundation))/download-product-configs"
#    input_mapping:
#      files: config
#    output_mapping:
#      interpolated-files: config
  - task: download-mysql-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/mysql.yml
    output_mapping: {downloaded-stemcell: mysql-stemcell}
  - aggregate:
    - put: mysql-product
      params:
        file: downloaded-product/*.pivotal
    - put: mysql-stemcell
      params:
        file: mysql-stemcell/*.tgz

- name: fetch-redis
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
#  - task: credhub-interpolate
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/credhub-interpolate.yml
#    params:
#      CREDHUB_CLIENT: ((credhub-client))
#      CREDHUB_SECRET: ((credhub-secret))
#      CREDHUB_SERVER: ((credhub-server))
#      CREDHUB_CA_CERT: ((credhub-ca.certificate))
#      PREFIX: '/concourse/((foundation))'
#      INTERPOLATION_PATH: "((foundation))/download-product-configs"
#    input_mapping:
#      files: config
#    output_mapping:
#      interpolated-files: config
  - task: download-redis-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/redis.yml
    output_mapping: {downloaded-stemcell: redis-stemcell}
  - aggregate:
    - put: redis-product
      params:
        file: downloaded-product/*.pivotal
    - put: redis-stemcell
      params:
        file: redis-stemcell/*.tgz

- name: fetch-pas
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
#  - task: credhub-interpolate
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/credhub-interpolate.yml
#    params:
#      CREDHUB_CLIENT: ((credhub-client))
#      CREDHUB_SECRET: ((credhub-secret))
#      CREDHUB_SERVER: ((credhub-server))
#      CREDHUB_CA_CERT: ((credhub-ca.certificate))
#      PREFIX: '/concourse/((foundation))'
#      INTERPOLATION_PATH: "((foundation))/download-product-configs"
#    input_mapping:
#      files: config
#    output_mapping:
#      interpolated-files: config
  - task: download-pas-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/pas.yml
    output_mapping: {downloaded-stemcell: pas-stemcell}
  - aggregate:
    - put: pas-product
      params:
        file: downloaded-product/*.pivotal
    - put: pas-stemcell
      params:
        file: pas-stemcell/*.tgz

- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz
