resources:
  - name: pcf-automation-tasks
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: .*tasks-(.*).zip

  - name: pcf-automation-image
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: .*image-(.*).tgz

  - name: installation
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_installation))
      regexp: installation-((foundation))-(.*).zip

  - name: opsman-image
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      bucket: ((s3_buckets_pivnet_products))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      secret_access_key: ((s3_secret_access_key))
      regexp: ((opsman_image_s3_versioned_regexp)) # vsphere ex: pcf-vsphere-(.*).ova

  - name: pas-stemcell
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: pas-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

  - name: pas-product
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: cf-(.*).pivotal

  - name: apm-stemcell
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: apm-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

  - name: apm-product
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: apm-(.*).pivotal

  - name: spring-cloud-services-stemcell
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: spring-cloud-services-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

  - name: spring-cloud-services-product
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: p-spring-cloud-services-(.*).pivotal

  - name: event-alerts-stemcell
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: event-alerts-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

  - name: event-alerts-product
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: p-event-alerts-(.*).pivotal

  - name: pas-windows-product
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      bucket: ((s3_buckets_pivnet_products))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      secret_access_key: ((s3_secret_access_key))
      regexp: pas-windows-(.*).pivotal

  - name: pas-windows-stemcell
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      bucket: ((s3_buckets_pivnet_products))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      secret_access_key: ((s3_secret_access_key))
      regexp: pas-windows-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

  - name: healthwatch-stemcell
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: healthwatch-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

  - name: healthwatch-product
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: p-healthwatch-(.*).pivotal

  - name: sso-stemcell
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: sso-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

  - name: sso-product
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: Pivotal_Single_Sign-On_Service_(.*).pivotal

  - name: rabbitmq-stemcell
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: rabbitmq-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

  - name: rabbitmq-product
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: p-rabbitmq-(.*).pivotal


  - name: mysql-stemcell
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: mysql-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

  - name: mysql-product
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: pivotal-mysql-(.*).pivotal

  - name: redis-stemcell
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: redis-stemcell/bosh-stemcell-(.*)-vsphere.*\.tgz

  - name: redis-product
    type: s3
    source:
      access_key_id: ((s3_access_key_id))
      secret_access_key: ((s3_secret_access_key))
      region_name: ((s3_region_name))
      endpoint: ((s3_endpoint))
      bucket: ((s3_buckets_pivnet_products))
      regexp: p-redis-(.*).pivotal

  # configurations
  - name: configuration
    type: git
    source:
      private_key: ((pcf-automation-ssh-key_private_key))
      uri: ((configuration_uri))
      branch: master

  - name: variable
    type: git
    source:
      private_key: ((pcf-automation-ssh-key_private_key))
      uri: ((configuration_uri))
      branch: master

  # triggers used to have jobs do something in a timely manner
  - name: one-time-trigger
    type: time
    source:
      interval: 999999h

  - name: daily-trigger
    type: time
    source:
      interval: 24h

jobs:
  - name: install-opsman
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
          - get: one-time-trigger
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: opsman-image
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-vars
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/vars"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: vars-int
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: create-vm
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/create-vm.yml
        input_mapping:
          image: opsman-image
          state: configuration
          config: configuration
#          vars: vars-int
        params:
          VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
          STATE_FILE: ((foundation))/state/state.yml
          OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
        ensure: &make-state-commit
          do:
            - task: make-commit
              image: pcf-automation-image
              file: pcf-automation-tasks/tasks/make-git-commit.yml
              input_mapping:
                repository: configuration
                file-source: generated-state
              output_mapping:
                repository-commit: configuration-commit
              params:
                FILE_SOURCE_PATH: state.yml
                FILE_DESTINATION_PATH: ((foundation))/state/state.yml
                GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
                GIT_AUTHOR_NAME: "PCF Automation Bot"
                COMMIT_MESSAGE: 'Update state file'
            - put: configuration
              params:
                repository: configuration-commit
                merge: true
      - task: configure-authentication
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/configure-authentication.yml
        attempts: 10
        input_mapping:
#          env: env-int
#          config: vars-int
        params:
          ENV_FILE: ((foundation))/env/env.yml
          AUTH_CONFIG_FILE: ((foundation))/vars/opsman-auth.yml
      - task: configure-director
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/configure-director.yml
        input_mapping:
          config: configuration
#          env: env-int
#          vars: vars-int
        params:
          VARS_FILES: vars/((foundation))/vars/director-vars.yml
          ENV_FILE: ((foundation))/env/env.yml
          DIRECTOR_CONFIG_FILE: ((foundation))/config/director.yml
      - task: apply-director-changes
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: staged-director-config
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-tasks
            params: {unpack: true}
          - get: pcf-automation-image
            params: {unpack: true}
            passed:
              - export-installation
          - get: configuration
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: staged-director-config
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/staged-director-config.yml
        input_mapping:
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: export-installation
    serial: true
    plan:
      - aggregate:
          - get: daily-trigger
            trigger: true
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - install-opsman
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: export-installation
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/export-installation.yml
        input_mapping:
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml
          INSTALLATION_FILE: installation-((foundation))-$timestamp.zip
      - put: installation
        params:
          file: installation/installation-((foundation))-*.zip

  - name: upgrade-opsman
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
          - get: one-time-trigger
            passed: [ install-opsman ]
          - get: pcf-automation-image
            params:
              unpack: true
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: opsman-image
          - get: installation
            passed: [ export-installation ]
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-vars
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/vars"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: vars-int
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: upgrade-opsman
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upgrade-opsman.yml
        input_mapping:
          image: opsman-image
          state: configuration
          config: configuration
#          env: env-int
#          vars: vars-int
        params:
          VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
          ENV_FILE: ((foundation))/env/env.yml
          OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
          STATE_FILE: ((foundation))/state/state.yml
        ensure: *make-state-commit
      - task: apply-director-changes
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-pas
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: pas-product
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: upload-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-product.yml
        input_mapping:
          product: pas-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: stage-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/stage-product.yml
        input_mapping:
          product: pas-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-pas
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-pas
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-vars
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/vars"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: vars-int
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: configure-pas
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
#          env: env-int
#          vars: vars-int
        params:
          CONFIG_FILE: ((foundation))/config/cf.yml
          VARS_FILES: vars/((foundation))/vars/cf-vars.yml
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-pas-windows
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: pas-windows-product
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: upload-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-product.yml
        input_mapping:
          product: pas-windows-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: stage-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/stage-product.yml
        input_mapping:
          product: pas-windows-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-sso
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: sso-product
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: upload-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-product.yml
        input_mapping:
          product: sso-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: stage-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/stage-product.yml
        input_mapping:
          product: sso-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-pas-windows
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-pas-windows
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-vars
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/vars"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: vars-int
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: configure-pas-windows
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
#          env: env-int
#          vars: vars-int
        params:
          CONFIG_FILE: ((foundation))/config/pas-windows.yml
          VARS_FILES: vars/((foundation))/vars/pas-windows-vars.yml
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-stemcells
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - install-opsman
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: pas-stemcell
            trigger: true
          - get: apm-stemcell
            trigger: true
          - get: spring-cloud-services-stemcell
            trigger: true
          - get: event-alerts-stemcell
            trigger: true
          - get: pas-windows-stemcell
            trigger: true
          - get: healthwatch-stemcell
            trigger: true
          - get: mysql-stemcell
            trigger: true
          - get: rabbitmq-stemcell
            trigger: true
          - get: redis-stemcell
            trigger: true
          - get: sso-stemcell
            trigger: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: upload-pas-stemcell
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: env-int
          stemcell: pas-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: upload-pas-windows-stemcell
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
#          env: env-int
          stemcell: pas-windows-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: upload-healthwatch-stemcell
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
#          env: env-int
          stemcell: healthwatch-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: upload-mysql-stemcell
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
#          env: env-int
          stemcell: mysql-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: upload-rabbitmq-stemcell
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
#          env: env-int
          stemcell: rabbitmq-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: upload-apm-stemcell
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
#          env: env-int
          stemcell: apm-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: upload-spring-cloud-services-stemcell
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
#          env: env-int
          stemcell: spring-cloud-services-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: upload-event-alerts-stemcell
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
#          env: env-int
          stemcell: event-alerts-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: upload-redis-stemcell
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
#          env: env-int
          stemcell: redis-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: upload-sso-stemcell
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
#          env: env-int
          stemcell: sso-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml


  - name: upload-and-stage-mysql
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: mysql-product
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SERVER: ((credhub-server))
#        PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: upload-and-stage-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: mysql-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-apm
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: apm-product
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: upload-and-stage-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: apm-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-spring-cloud-services
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: spring-cloud-services-product
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: upload-and-stage-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: spring-cloud-services-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-event-alerts
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: event-alerts-product
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: upload-and-stage-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: event-alerts-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-apm
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-apm
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-vars
#        image: pcf-automation-image
#        CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          INTERPOLATION_PATH: "((foundation))/vars"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: vars-int
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: configure-apm
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
#          env: env-int
#          vars: vars-int
        params:
          CONFIG_FILE: ((foundation))/config/apm.yml
          VARS_FILES: vars/((foundation))/vars/apm-vars.yml
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-spring-cloud-services
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-spring-cloud-services
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-vars
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/vars"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: vars-int
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: configure-spring-cloud-services
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
#          env: env-int
#          vars: vars-int
        params:
          CONFIG_FILE: ((foundation))/config/p-spring-cloud-services.yml
          VARS_FILES: vars/((foundation))/vars/p-spring-cloud-services-vars.yml
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-event-alerts
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-event-alerts
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-vars
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/vars"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: vars-int
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: configure-event-alerts
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
#          env: env-int
#          vars: vars-int
        params:
          CONFIG_FILE: ((foundation))/config/p-event-alerts.yml
          VARS_FILES: vars/((foundation))/vars/p-event-alerts-vars.yml
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-sso
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-sso
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-vars
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/vars"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: vars-int
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: configure-sso
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
#          env: env-int
#          vars: vars-int
        params:
          CONFIG_FILE: ((foundation))/config/sso.yml
          VARS_FILES: vars/((foundation))/vars/sso-vars.yml
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-mysql
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-mysql
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-vars
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/vars"
#          files: configuration
#        output_mapping:
#          interpolated-files: vars-int
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: configure-mysql
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
#          env: env-int
#          vars: vars-int
        params:
          CONFIG_FILE: ((foundation))/config/pivotal-mysql.yml
          VARS_FILES: vars/((foundation))/vars/pivotal-mysql-vars.yml
          ENV_FILE: ((foundation))/env/env.yml
      - task: create-mysql-ca-in-credhub
        image: pcf-automation-image
        file: configuration/tasks/create-mysql-ca/task.yml
        input_mapping:
          config: configuration
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-redis
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: redis-product
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: upload-and-stage-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: redis-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-redis
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-redis
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-vars
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/vars"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: vars-int
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: configure-redis
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
#          env: env-int
#          vars: vars-int
        params:
          CONFIG_FILE: ((foundation))/config/p-redis.yml
          VARS_FILES: vars/((foundation))/vars/p-redis-vars.yml
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-rabbitmq
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: rabbitmq-product
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: upload-and-stage-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: rabbitmq-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml


  - name: configure-rabbitmq
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-rabbitmq
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-vars
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/vars"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: vars-int
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: configure-rabbitmq
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
#          env: env-int
#          vars: vars-int
        params:
          CONFIG_FILE: ((foundation))/config/p-rabbitmq.yml
          VARS_FILES: vars/((foundation))/vars/p-rabbitmq-vars.yml
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-healthwatch
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upgrade-opsman
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: healthwatch-product
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: upload-and-stage-product
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: healthwatch-product
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-healthwatch
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-healthwatch
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-vars
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/vars"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: vars-int
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: configure-healthwatch
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
#          env: env-int
#          vars: vars-int
        params:
          CONFIG_FILE: ((foundation))/config/p-healthwatch.yml
          VARS_FILES: vars/((foundation))/vars/p-healthwatch-vars.yml
          ENV_FILE: ((foundation))/env/env.yml
      - task: create-hw-bosh-uaa-client
        file: configuration/tasks/create-hw-bosh-uaa-client/task.yml
        input_mapping:
          config: configuration
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml
          BOSH_HW_CLIENT_SECRET: ((bosh-healthwatch-uaa-client-secret))
          BOSH_HW_CLIENT_NAME: bosh-hw-client

  - name: apply-product-changes
    serial: true
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - staged-healthwatch-config
              - staged-pas-config
              - staged-mysql-config
              - staged-pas-windows-config
              - staged-rabbitmq-config
              - staged-redis-config
              - staged-apm-config
              - staged-spring-cloud-services-config
              - staged-event-alerts-config
              - staged-sso-config
              - staged-mysql-config
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: apply-product-changes
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/apply-changes.yml
        input_mapping:
#          env: env-int
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: staged-pas-config
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - configure-pas
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: staged-config
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/staged-config.yml
        input_mapping:
#          env: env-int
        params:
          PRODUCT_NAME: cf
          ENV_FILE: ((foundation))/env/env.yml

  - name: staged-pas-windows-config
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - configure-pas-windows
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: staged-config
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/staged-config.yml
        input_mapping:
#          env: env-int
        params:
          PRODUCT_NAME: pas-windows
          ENV_FILE: ((foundation))/env/env.yml

  - name: staged-healthwatch-config
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - configure-healthwatch
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: staged-config
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/staged-config.yml
        input_mapping:
#          env: env-int
        params:
          PRODUCT_NAME: p-healthwatch
          ENV_FILE: ((foundation))/env/env.yml

  - name: staged-mysql-config
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - configure-mysql
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: staged-config
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/staged-config.yml
        input_mapping:
#          env: env-int
        params:
          PRODUCT_NAME: pivotal-mysql
          ENV_FILE: ((foundation))/env/env.yml

  - name: staged-apm-config
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - configure-apm
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: staged-config
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/staged-config.yml
        input_mapping:
#          env: env-int
        params:
          PRODUCT_NAME: apmPostgres
          ENV_FILE: ((foundation))/env/env.yml

  - name: staged-sso-config
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - configure-sso
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          PREFIX: '/concourse/((foundation))'
#        INTERPOLATION_PATH: "((foundation))/env"
#      input_mapping:
#        files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: staged-config
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/staged-config.yml
        input_mapping:
#          env: env-int
        params:
          PRODUCT_NAME: Pivotal_Single_Sign-On_Service
          ENV_FILE: ((foundation))/env/env.yml

  - name: staged-spring-cloud-services-config
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - configure-spring-cloud-services
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: staged-config
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/staged-config.yml
        input_mapping:
#          env: env-int
        params:
          PRODUCT_NAME: p-spring-cloud-services
          ENV_FILE: ((foundation))/env/env.yml

  - name: staged-event-alerts-config
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - configure-event-alerts
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: staged-config
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/staged-config.yml
        input_mapping:
#          env: env-int
        params:
          PRODUCT_NAME: p-event-alerts
          ENV_FILE: ((foundation))/env/env.yml

  - name: staged-rabbitmq-config
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - configure-rabbitmq
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: staged-config
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/staged-config.yml
        input_mapping:
#          env: env-int
        params:
          PRODUCT_NAME: p-rabbitmq
          ENV_FILE: ((foundation))/env/env.yml

  - name: staged-redis-config
    plan:
      - aggregate:
          - get: pcf-automation-image
            params:
              unpack: true
            passed:
              - configure-redis
            trigger: true
          - get: pcf-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
#      - task: credhub-interpolate-env
#        image: pcf-automation-image
#        file: pcf-automation-tasks/tasks/credhub-interpolate.yml
#        params:
#          CREDHUB_CLIENT: ((credhub-client))
#          CREDHUB_SECRET: ((credhub-secret))
#          CREDHUB_SERVER: ((credhub-server))
#          CREDHUB_CA_CERT: ((credhub-ca.certificate))
#          PREFIX: '/concourse/((foundation))'
#          INTERPOLATION_PATH: "((foundation))/env"
#        input_mapping:
#          files: configuration
#        output_mapping:
#          interpolated-files: env-int
      - task: staged-config
        image: pcf-automation-image
        file: pcf-automation-tasks/tasks/staged-config.yml
        input_mapping:
#          env: env-int
        params:
          PRODUCT_NAME: p-redis
          ENV_FILE: ((foundation))/env/env.yml
