resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final

resources:
- name: daily
  type: time
  source:
    interval: 24h

- name: config
  type: git
  source:
    private_key: ((pcf-automation-ssh-key.private_key))
    uri: ((configuration.uri))
    branch: master
    submodules: all
    depth: 1

- name: pks-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: pivotal-container-service-(.*).pivotal

- name: pks-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: pks-stemcell/bosh-stemcell-(.*)-aws.*\.tgz

- name: sso-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: Pivotal_Single_Sign-On_Service_(.*).pivotal

- name: sso-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: sso-stemcell/bosh-stemcell-(.*)-aws.*\.tgz

- name: healthwatch-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: p-healthwatch-(.*).pivotal

- name: healthwatch-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: healthwatch-stemcell/bosh-stemcell-(.*)-aws.*\.tgz

- name: apm-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: apm-(.*).pivotal

- name: apm-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: apm-stemcell/bosh-stemcell-(.*)-aws.*\.tgz

- name: mysql-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: pivotal-mysql-(.*).pivotal

- name: mysql-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: mysql-stemcell/bosh-stemcell-(.*)-aws.*\.tgz

- name: spring-cloud-services-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: p-spring-cloud-services-(.*).pivotal

- name: spring-cloud-services-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: spring-cloud-services-stemcell/bosh-stemcell-(.*)-aws.*\.tgz

- name: event-alerts-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: p-event-alerts-(.*).pivotal

- name: event-alerts-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: event-alerts-stemcell/bosh-stemcell-(.*)-aws.*\.tgz

- name: rabbitmq-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: p-rabbitmq-(.*).pivotal

- name: rabbitmq-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: rabbitmq-stemcell/bosh-stemcell-(.*)-aws.*\.tgz

- name: redis-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: p-redis-(.*).pivotal

- name: redis-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: redis-stemcell/bosh-stemcell-(.*)-aws.*\.tgz

- name: opsman-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: ops-manager-vsphere-(.*).yml

- name: pas-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: cf-(.*).pivotal

- name: pas-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: pas-stemcell/bosh-stemcell-(.*)-aws.*\.tgz

- name: pas-windows-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: pas-windows-(.*).pivotal

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 2\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-image-(.*).tgz
    
- name: pcloudcache-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: p-cloudcache-(.*).pivotal

- name: pcloudcache-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: pcloudcache-stemcell/bosh-stemcell-(.*)-aws.*\.tgz
    
- name: awsservicebroker-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: aws-services-(.*).pivotal

- name: awsservicebroker-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.bucket))
    region_name: ((s3.region_name))
    
    secret_access_key: ((s3.secret_access_key))
    regexp: awsservicebroker/bosh-stemcell-(.*)-aws.*\.tgz

jobs:
- name: fetch-pks
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
#  - task: credhub-interpolate
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/credhub-interpolate.yml
#    params:
#      CREDHUB_CLIENT: ((credhub-client))
#      CREDHUB_SECRET: ((credhub-secret))
#      CREDHUB_SERVER: ((credhub-server))
#      CREDHUB_CA_CERT: ((credhub-ca.certificate))
#      PREFIX: '/concourse/((foundation))'
#      INTERPOLATION_PATH: "((foundation))/download-product-configs"
#    input_mapping:
#      files: config
#    output_mapping:
#      interpolated-files: config
  - task: download-pks-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/pks.yml
    output_mapping: {downloaded-stemcell: pks-stemcell}
  - aggregate:
    - put: pks-product
      params:
        file: downloaded-product/*.pivotal
    - put: pks-stemcell
      params:
        file: pks-stemcell/*.tgz

- name: fetch-healthwatch
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
#  - task: credhub-interpolate
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/credhub-interpolate.yml
#    params:
#      CREDHUB_CLIENT: ((credhub-client))
#      CREDHUB_SECRET: ((credhub-secret))
#      CREDHUB_SERVER: ((credhub-server))
#      CREDHUB_CA_CERT: ((credhub-ca.certificate))
#      PREFIX: '/concourse/((foundation))'
#      INTERPOLATION_PATH: "((foundation))/download-product-configs"
#    input_mapping:
#      files: config
#    output_mapping:
#      interpolated-files: config
  - task: download-healthwatch-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/healthwatch.yml
    output_mapping: {downloaded-stemcell: healthwatch-stemcell}
  - aggregate:
    - put: healthwatch-product
      params:
        file: downloaded-product/*.pivotal
    - put: healthwatch-stemcell
      params:
        file: healthwatch-stemcell/*.tgz

- name: fetch-spring-cloud-services
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca.certificate))
      PREFIX: '/concourse/((foundation))'
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-spring-cloud-services-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/spring-cloud-services.yml
    output_mapping: {downloaded-stemcell: spring-cloud-services-stemcell}
  - aggregate:
    - put: spring-cloud-services-product
      params:
        file: downloaded-product/*.pivotal
    - put: spring-cloud-services-stemcell
      params:
        file: spring-cloud-services-stemcell/*.tgz

- name: fetch-event-alerts
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca.certificate))
      PREFIX: '/concourse/((foundation))'
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-event-alerts-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/event-alerts.yml
    output_mapping: {downloaded-stemcell: event-alerts-stemcell}
  - aggregate:
    - put: event-alerts-product
      params:
        file: downloaded-product/*.pivotal
    - put: event-alerts-stemcell
      params:
        file: event-alerts-stemcell/*.tgz

- name: fetch-apm
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca.certificate))
      PREFIX: '/concourse/((foundation))'
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-apm-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/apm.yml
    output_mapping: {downloaded-stemcell: apm-stemcell}
  - aggregate:
    - put: apm-product
      params:
        file: downloaded-product/*.pivotal
    - put: apm-stemcell
      params:
        file: apm-stemcell/*.tgz

- name: fetch-sso
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca.certificate))
      PREFIX: '/concourse/((foundation))'
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-sso-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/sso.yml
    output_mapping: {downloaded-stemcell: sso-stemcell}
  - aggregate:
    - put: sso-product
      params:
        file: downloaded-product/*.pivotal
    - put: sso-stemcell
      params:
        file: sso-stemcell/*.tgz

- name: fetch-rabbitmq
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca.certificate))
      PREFIX: '/concourse/((foundation))'
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-rabbitmq-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/rabbitmq.yml
    output_mapping: {downloaded-stemcell: rabbitmq-stemcell}
  - aggregate:
    - put: rabbitmq-product
      params:
        file: downloaded-product/*.pivotal
    - put: rabbitmq-stemcell
      params:
        file: rabbitmq-stemcell/*.tgz

- name: fetch-mysql
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca.certificate))
      PREFIX: '/concourse/((foundation))'
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-mysql-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/mysql.yml
    output_mapping: {downloaded-stemcell: mysql-stemcell}
  - aggregate:
    - put: mysql-product
      params:
        file: downloaded-product/*.pivotal
    - put: mysql-stemcell
      params:
        file: mysql-stemcell/*.tgz

- name: fetch-redis
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca.certificate))
      PREFIX: '/concourse/((foundation))'
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-redis-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/redis.yml
    output_mapping: {downloaded-stemcell: redis-stemcell}
  - aggregate:
    - put: redis-product
      params:
        file: downloaded-product/*.pivotal
    - put: redis-stemcell
      params:
        file: redis-stemcell/*.tgz

- name: fetch-opsman
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca.certificate))
      PREFIX: '/concourse/((foundation))'
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/opsman.yml
  - aggregate:
    - put: opsman-product
      params:
        file: downloaded-product/*

- name: fetch-pas
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca.certificate))
      PREFIX: '/concourse/((foundation))'
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-pas-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/pas.yml
    output_mapping: {downloaded-stemcell: pas-stemcell}
  - aggregate:
    - put: pas-product
      params:
        file: downloaded-product/*.pivotal
    - put: pas-stemcell
      params:
        file: pas-stemcell/*.tgz

- name: fetch-pas-windows
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca.certificate))
      PREFIX: '/concourse/((foundation))'
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-pas-windows-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/pas-windows.yml
  - aggregate:
    - put: pas-windows-product
      params:
        file: downloaded-product/*.pivotal

- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz
        
- name: fetch-awsservicebroker
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca.certificate))
      PREFIX: '/concourse/((foundation))'
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-awsservicebroker-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/awsservicebroker.yml
    output_mapping: {downloaded-stemcell: awsservicebroker-stemcell}
  - aggregate:
    - put: awsservicebroker-product
      params:
        file: downloaded-product/*.pivotal
    - put: awsservicebroker-stemcell
      params:
        file: awsservicebroker-stemcell/*.tgz

- name: fetch-pcloudcache
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CA_CERT: ((credhub-ca.certificate))
      PREFIX: '/concourse/((foundation))'
      INTERPOLATION_PATH: "((foundation))/download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-pcloudcache-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((foundation))/download-product-configs/pcloudcache.yml
    output_mapping: {downloaded-stemcell: pcloudcache-stemcell}
  - aggregate:
    - put: pcloudcache-product
      params:
        file: downloaded-product/*.pivotal
    - put: pcloudcache-stemcell
      params:
        file: pcloudcache-stemcell/*.tgz

        
